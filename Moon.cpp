//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//
//       Command:
//           LottieGen -GenerateColorBindings -Language Cppwinrt -Namespace SuiteInstaller
//           -WinUIVersion 3.0 -InputFile Moon.json
//
//       Input file:
//           Moon.json (10105 bytes created 13:51+02:00 Nov 11 2024)
//
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   130 |
// |--------------------------+-------|
// | Expression animators     |    17 |
// | KeyFrame animators       |    23 |
// | Reference parameters     |    17 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     2 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |    17 |
// | PathKeyFrameAnimations   |     1 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     2 |
// | CompositionSpriteShapes  |     9 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "stdafx.h"
#include "Moon.h"
#if __has_include("Moon.g.cpp")
#include "Moon.g.cpp"
#endif
#include "d2d1.h"
#include <Windows.Graphics.Interop.h>
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <winrt/Microsoft.UI.Composition.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.Foundation.Metadata.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI;
using namespace winrt::Microsoft::UI::Composition;
using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using Color                  = winrt::Windows::UI::Color;
using CompositionPropertySet = winrt::Microsoft::UI::Composition::CompositionPropertySet;
using TimeSpan               = winrt::Windows::Foundation::TimeSpan;

namespace winrt::SuiteInstaller::implementation
{
class CanvasGeometry
  : public winrt::implements<CanvasGeometry,
                             IGeometrySource2D,
                             ::ABI::Windows::Graphics::IGeometrySource2DInterop>
{
  winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
  CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
    : _geometry{ geometry }
  {
  }

  // IGeometrySource2D.
  winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

  // IGeometrySource2DInterop.
  IFACEMETHODIMP GetGeometry(ID2D1Geometry ** value) noexcept(true) override
  {
    _geometry.copy_to(value);
    return S_OK;
  }

  // IGeometrySource2DInterop.
  IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory *,
                                            ID2D1Geometry **) noexcept(true) override
  {
    return E_NOTIMPL;
  }
};
class Moon_AnimatedVisual
  : public winrt::implements<Moon_AnimatedVisual,
                             winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2,
                             winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
                             IClosable>
{
  winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
  static constexpr int64_t     c_durationTicks{ 17000000L };
  Compositor const             _c{ nullptr };
  ExpressionAnimation const    _reusableExpressionAnimation{ nullptr };
  AnimationController          _animationController_0{ nullptr };
  CompositionColorBrush        _animatedColorBrush_Black_to_Black_0{ nullptr };
  CompositionColorBrush        _animatedColorBrush_Black_to_Black_1{ nullptr };
  CompositionContainerShape    _containerShape_0{ nullptr };
  CompositionContainerShape    _containerShape_1{ nullptr };
  CompositionPath              _path_0{ nullptr };
  CompositionPath              _path_1{ nullptr };
  CompositionPath              _path_2{ nullptr };
  CompositionPath              _path_3{ nullptr };
  CompositionPath              _path_4{ nullptr };
  CompositionPath              _path_5{ nullptr };
  CompositionPathGeometry      _pathGeometry_0{ nullptr };
  CompositionPathGeometry      _pathGeometry_1{ nullptr };
  CompositionPathGeometry      _pathGeometry_2{ nullptr };
  CompositionPathGeometry      _pathGeometry_3{ nullptr };
  CompositionPathGeometry      _pathGeometry_4{ nullptr };
  CompositionPathGeometry      _pathGeometry_5{ nullptr };
  CompositionPathGeometry      _pathGeometry_6{ nullptr };
  CompositionPathGeometry      _pathGeometry_7{ nullptr };
  CompositionPathGeometry      _pathGeometry_8{ nullptr };
  CompositionSpriteShape       _spriteShape_8{ nullptr };
  ContainerVisual              _root{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_0{ nullptr };
  ScalarKeyFrameAnimation      _scalarAnimation_1_to_1{ nullptr };
  ScalarKeyFrameAnimation      _tEndScalarAnimation_1_to_0p66{ nullptr };
  ScalarKeyFrameAnimation      _tStartScalarAnimation_1_to_1{ nullptr };
  StepEasingFunction           _holdThenStepEasingFunction{ nullptr };
  StepEasingFunction           _stepThenHoldEasingFunction{ nullptr };

  void BindProperty(CompositionObject target,
                    winrt::hstring    animatedPropertyName,
                    winrt::hstring    expression,
                    winrt::hstring    referenceParameterName,
                    CompositionObject referencedObject)
  {
    _reusableExpressionAnimation.ClearAllParameters();
    _reusableExpressionAnimation.Expression(expression);
    _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
    target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
  }

  ColorKeyFrameAnimation CreateColorKeyFrameAnimation(
    float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreateColorKeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InterpolationColorSpace(CompositionColorSpace::Rgb);
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  PathKeyFrameAnimation CreatePathKeyFrameAnimation(float                     initialProgress,
                                                    CompositionPath           initialValue,
                                                    CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreatePathKeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(
    float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreateScalarKeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(
    float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreateVector2KeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
  {
    const auto result = _c.CreateSpriteShape(geometry);
    result.TransformMatrix(transformMatrix);
    return result;
  }

  AnimationController AnimationController_0()
  {
    if (_animationController_0 != nullptr)
    {
      return _animationController_0;
    }
    const auto result = _animationController_0 = _c.CreateAnimationController();
    result.Pause();
    BindProperty(_animationController_0, L"Progress", L"_.Progress", L"_", _root);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_0()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 4.87300014F, -4.87300014F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddLine({ -4.87300014F, 4.87300014F });
    sink->EndFigure(D2D1_FIGURE_END_OPEN);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_1()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ -5.15399981F, 5.15399981F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddLine({ 5.15399981F, -5.15399981F });
    sink->EndFigure(D2D1_FIGURE_END_OPEN);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_2()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 5.09200001F, 5.09200001F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddLine({ -5.09200001F, -5.09200001F });
    sink->EndFigure(D2D1_FIGURE_END_OPEN);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_3()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ -4.93599987F, -4.93599987F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddLine({ 4.93599987F, 4.93599987F });
    sink->EndFigure(D2D1_FIGURE_END_OPEN);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_4()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ -1.0F, -0.061999999F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier(
      { { -1.0F, -7.76599979F }, { 2.23200011F, -14.7119999F }, { 7.40700006F, -19.6310005F } });
    sink->AddBezier(
      { { 5.10099983F, -20.5020008F }, { 2.61100006F, -20.9990005F }, { 0.0F, -20.9990005F } });
    sink->AddBezier(
      { { -11.5979996F, -20.9990005F }, { -21.0F, -11.599F }, { -21.0F, -0.00100000005F } });
    sink->AddBezier(
      { { -21.0F, 11.5970001F }, { -11.5979996F, 20.9990005F }, { 0.0F, 20.9990005F } });
    sink->AddBezier(
      { { 2.64700007F, 20.9990005F }, { 5.17000008F, 20.4899998F }, { 7.50199986F, 19.5960007F } });
    sink->AddBezier(
      { { 2.27099991F, 14.6719999F }, { -1.0F, 7.68900013F }, { -1.0F, -0.061999999F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_5()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 21.0F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier(
      { { 21.0F, -3.20300007F }, { 20.2830009F, -6.23899984F }, { 19.0F, -8.95600033F } });
    sink->AddBezier({ { 15.6389999F, -16.0739994F }, { 8.39500046F, -21.0F }, { 0.0F, -21.0F } });
    sink->AddBezier({ { -11.5979996F, -21.0F }, { -21.0F, -11.5979996F }, { -21.0F, 0.0F } });
    sink->AddBezier({ { -21.0F, 11.5979996F }, { -11.5979996F, 21.0F }, { 0.0F, 21.0F } });
    sink->AddBezier(
      { { 8.42000008F, 21.0F }, { 15.6829996F, 16.0440006F }, { 19.0310001F, 8.89000034F } });
    sink->AddBezier({ { 20.2940006F, 6.19000006F }, { 21.0F, 3.17799997F }, { 21.0F, 0.0F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // Color
  ColorKeyFrameAnimation ColorAnimation_Black_to_Black_0()
  {
    // Frame 0.
    const auto result =
      CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x00, 0x00, 0x00 }, StepThenHoldEasingFunction());
    // Frame 7.
    // Black
    result.InsertKeyFrame(0.137254909F, { 0xFF, 0x00, 0x00, 0x00 }, HoldThenStepEasingFunction());
    // Frame 8.
    // White
    result.InsertKeyFrame(0.156862751F, { 0xFF, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
    // Frame 29.
    // White
    result.InsertKeyFrame(0.568627477F, { 0xFF, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
    // Frame 30.
    // Black
    result.InsertKeyFrame(0.588235319F, { 0xFF, 0x00, 0x00, 0x00 }, CubicBezierEasingFunction_0());
    return result;
  }

  // - - - Layer aggregator
  // - ShapeGroup: Group 1
  // Color
  ColorKeyFrameAnimation ColorAnimation_Black_to_Black_1()
  {
    // Frame 0.
    const auto result =
      CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x00, 0x00, 0x00 }, StepThenHoldEasingFunction());
    // Frame 7.
    // Black
    result.InsertKeyFrame(0.137254909F, { 0xFF, 0x00, 0x00, 0x00 }, HoldThenStepEasingFunction());
    // Frame 8.
    // White
    result.InsertKeyFrame(0.156862751F, { 0xFF, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
    // Frame 27.
    // White
    result.InsertKeyFrame(0.529411793F, { 0xFF, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
    // Frame 28.
    // Black
    result.InsertKeyFrame(0.549019635F, { 0xFF, 0x00, 0x00, 0x00 }, CubicBezierEasingFunction_0());
    return result;
  }

  CompositionColorBrush AnimatedColorBrush_Black_to_Black_0()
  {
    if (_animatedColorBrush_Black_to_Black_0 != nullptr)
    {
      return _animatedColorBrush_Black_to_Black_0;
    }
    const auto result = _animatedColorBrush_Black_to_Black_0 = _c.CreateColorBrush();
    return result;
  }

  // - - Layer aggregator
  // ShapeGroup: Group 1
  CompositionColorBrush AnimatedColorBrush_Black_to_Black_1()
  {
    if (_animatedColorBrush_Black_to_Black_1 != nullptr)
    {
      return _animatedColorBrush_Black_to_Black_1;
    }
    const auto result = _animatedColorBrush_Black_to_Black_1 = _c.CreateColorBrush();
    return result;
  }

  // Layer aggregator
  // Layer: rays
  CompositionContainerShape ContainerShape_0()
  {
    if (_containerShape_0 != nullptr)
    {
      return _containerShape_0;
    }
    const auto result = _containerShape_0 = _c.CreateContainerShape();
    result.Scale({ 0.0F, 0.0F });
    const auto shapes = result.Shapes();
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_0());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_1());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_2());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_3());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_4());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_5());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_6());
    // Offset:<-10.171001, -10.963001>
    shapes.Append(SpriteShape_7());
    return result;
  }

  // Layer aggregator
  CompositionContainerShape ContainerShape_1()
  {
    if (_containerShape_1 != nullptr)
    {
      return _containerShape_1;
    }
    const auto result = _containerShape_1 = _c.CreateContainerShape();
    result.CenterPoint({ 50.0F, 51.0620003F });
    result.Offset({ -10.0F, -10.8120003F });
    result.RotationAngleInDegrees(-135.0F);
    // ShapeGroup: Group 1
    result.Shapes().Append(SpriteShape_8());
    return result;
  }

  CompositionPath Path_0()
  {
    if (_path_0 != nullptr)
    {
      return _path_0;
    }
    const auto result = _path_0 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0()));
    return result;
  }

  CompositionPath Path_1()
  {
    if (_path_1 != nullptr)
    {
      return _path_1;
    }
    const auto result = _path_1 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1()));
    return result;
  }

  CompositionPath Path_2()
  {
    if (_path_2 != nullptr)
    {
      return _path_2;
    }
    const auto result = _path_2 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2()));
    return result;
  }

  CompositionPath Path_3()
  {
    if (_path_3 != nullptr)
    {
      return _path_3;
    }
    const auto result = _path_3 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_3()));
    return result;
  }

  CompositionPath Path_4()
  {
    if (_path_4 != nullptr)
    {
      return _path_4;
    }
    const auto result = _path_4 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_4()));
    return result;
  }

  CompositionPath Path_5()
  {
    if (_path_5 != nullptr)
    {
      return _path_5;
    }
    const auto result = _path_5 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_5()));
    return result;
  }

  CompositionPathGeometry PathGeometry_0()
  {
    if (_pathGeometry_0 != nullptr)
    {
      return _pathGeometry_0;
    }
    const auto result = _pathGeometry_0 = _c.CreatePathGeometry(Path_0());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_0, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_0);
    BindProperty(_pathGeometry_0, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_0);
    return result;
  }

  CompositionPathGeometry PathGeometry_1()
  {
    if (_pathGeometry_1 != nullptr)
    {
      return _pathGeometry_1;
    }
    const auto result = _pathGeometry_1 = _c.CreatePathGeometry(Path_1());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_1, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_1);
    BindProperty(_pathGeometry_1, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_1);
    return result;
  }

  CompositionPathGeometry PathGeometry_2()
  {
    if (_pathGeometry_2 != nullptr)
    {
      return _pathGeometry_2;
    }
    const auto result = _pathGeometry_2 = _c.CreatePathGeometry(Path_2());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_2, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_2);
    BindProperty(_pathGeometry_2, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_2);
    return result;
  }

  CompositionPathGeometry PathGeometry_3()
  {
    if (_pathGeometry_3 != nullptr)
    {
      return _pathGeometry_3;
    }
    const auto result = _pathGeometry_3 = _c.CreatePathGeometry(Path_3());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_3, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_3);
    BindProperty(_pathGeometry_3, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_3);
    return result;
  }

  CompositionPathGeometry PathGeometry_4()
  {
    if (_pathGeometry_4 != nullptr)
    {
      return _pathGeometry_4;
    }
    const auto result = _pathGeometry_4 = _c.CreatePathGeometry(Path_0());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_4, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_4);
    BindProperty(_pathGeometry_4, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_4);
    return result;
  }

  CompositionPathGeometry PathGeometry_5()
  {
    if (_pathGeometry_5 != nullptr)
    {
      return _pathGeometry_5;
    }
    const auto result = _pathGeometry_5 = _c.CreatePathGeometry(Path_1());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_5, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_5);
    BindProperty(_pathGeometry_5, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_5);
    return result;
  }

  CompositionPathGeometry PathGeometry_6()
  {
    if (_pathGeometry_6 != nullptr)
    {
      return _pathGeometry_6;
    }
    const auto result = _pathGeometry_6 = _c.CreatePathGeometry(Path_2());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_6, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_6);
    BindProperty(_pathGeometry_6, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_6);
    return result;
  }

  CompositionPathGeometry PathGeometry_7()
  {
    if (_pathGeometry_7 != nullptr)
    {
      return _pathGeometry_7;
    }
    const auto result = _pathGeometry_7 = _c.CreatePathGeometry(Path_3());
    const auto propertySet              = result.Properties();
    propertySet.InsertScalar(L"TEnd", 1.0F);
    propertySet.InsertScalar(L"TStart", 1.0F);
    BindProperty(_pathGeometry_7, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", _pathGeometry_7);
    BindProperty(_pathGeometry_7, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", _pathGeometry_7);
    return result;
  }

  // - - Layer aggregator
  // ShapeGroup: Group 1
  CompositionPathGeometry PathGeometry_8()
  {
    if (_pathGeometry_8 != nullptr)
    {
      return _pathGeometry_8;
    }
    const auto result = _pathGeometry_8 = _c.CreatePathGeometry();
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_0()
  {
    // Offset:<53.591488, 26.714228>, Rotation:-0.0026894898433689426 degrees,
    // Scale:<0.69, 0.69>
    const auto result = CreateSpriteShape(
      PathGeometry_0(), { 0.689999998F, 0.0F, 0.0F, 0.689999998F, 53.5914879F, 26.7142277F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_1()
  {
    // Offset:<26.355118, 53.94991>, Rotation:-0.0026894898433689426 degrees,
    // Scale:<0.69, 0.69>
    const auto result = CreateSpriteShape(
      PathGeometry_1(), { 0.689999998F, 0.0F, 0.0F, 0.689999998F, 26.3551178F, 53.9499092F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_2()
  {
    // Offset:<53.7426, 53.907127>, Rotation:-0.0026894898433689426 degrees,
    // Scale:<0.69, 0.69>
    const auto result = CreateSpriteShape(
      PathGeometry_2(), { 0.689999998F, 0.0F, 0.0F, 0.689999998F, 53.7425995F, 53.9071274F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_3()
  {
    // Offset:<26.505539, 26.67076>, Rotation:-0.0026894898433689426 degrees,
    // Scale:<0.69, 0.69>
    const auto result = CreateSpriteShape(
      PathGeometry_3(), { 0.689999998F, 0.0F, 0.0F, 0.689999998F, 26.5055389F, 26.6707592F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_4()
  {
    // Offset:<59.286003, 40.309772>, Rotation:44.99999914906308 degrees,
    // Scale:<0.68999994, 0.68999994>
    const auto result =
      CreateSpriteShape(PathGeometry_4(), { 0.487903655F, 0.487903655F, -0.487903655F, 0.487903655F,
                                            59.2860031F, 40.3097725F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_5()
  {
    // Offset:<20.768444, 40.309288>, Rotation:44.99999914906308 degrees,
    // Scale:<0.68999994, 0.68999994>
    const auto result =
      CreateSpriteShape(PathGeometry_5(), { 0.487903655F, 0.487903655F, -0.487903655F, 0.487903655F,
                                            20.7684441F, 40.309288F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_6()
  {
    // Offset:<40.16457, 59.6449>, Rotation:44.99999914906308 degrees,
    // Scale:<0.68999994, 0.68999994>
    const auto result =
      CreateSpriteShape(PathGeometry_6(), { 0.487903655F, 0.487903655F, -0.487903655F, 0.487903655F,
                                            40.1645699F, 59.6449013F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  // Path 1
  CompositionSpriteShape SpriteShape_7()
  {
    // Offset:<40.16408, 21.126377>, Rotation:44.99999914906308 degrees,
    // Scale:<0.68999994, 0.68999994>
    const auto result =
      CreateSpriteShape(PathGeometry_7(), { 0.487903655F, 0.487903655F, -0.487903655F, 0.487903655F,
                                            40.1640816F, 21.1263771F });
    ;
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_0());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // - Layer aggregator
  // Path 1
  CompositionSpriteShape SpriteShape_8()
  {
    if (_spriteShape_8 != nullptr)
    {
      return _spriteShape_8;
    }
    const auto result = _spriteShape_8 = _c.CreateSpriteShape(PathGeometry_8());
    result.Offset({ 50.0F, 51.0620003F });
    result.StrokeBrush(AnimatedColorBrush_Black_to_Black_1());
    result.StrokeDashCap(CompositionStrokeCap::Round);
    result.StrokeStartCap(CompositionStrokeCap::Round);
    result.StrokeEndCap(CompositionStrokeCap::Round);
    result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
    result.StrokeMiterLimit(2.0F);
    result.StrokeThickness(4.0F);
    return result;
  }

  // The root of the composition.
  ContainerVisual Root()
  {
    if (_root != nullptr)
    {
      return _root;
    }
    const auto result = _root = _c.CreateContainerVisual();
    const auto propertySet    = result.Properties();
    propertySet.InsertScalar(L"Progress", 0.0F);
    // Layer aggregator
    result.Children().InsertAtTop(ShapeVisual_0());
    return result;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_0()
  {
    return (_cubicBezierEasingFunction_0 == nullptr)
             ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(
                 { 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F })
             : _cubicBezierEasingFunction_0;
  }

  // - - - Layer aggregator
  // - ShapeGroup: Group 1
  // Path
  PathKeyFrameAnimation PathKeyFrameAnimation_0()
  {
    // Frame 0.
    const auto result = CreatePathKeyFrameAnimation(0.0F, Path_4(), HoldThenStepEasingFunction());
    // Frame 10.
    result.InsertKeyFrame(
      0.196078435F, Path_5(),
      _c.CreateCubicBezierEasingFunction({ 0.699000001F, 0.0F }, { 0.0F, 1.0F }));
    // Frame 27.
    result.InsertKeyFrame(0.529411793F, Path_5(), CubicBezierEasingFunction_0());
    // Frame 38.
    result.InsertKeyFrame(
      0.745098054F, Path_4(),
      _c.CreateCubicBezierEasingFunction({ 0.882000029F, 0.0F }, { 0.666999996F, 1.0F }));
    return result;
  }

  // Scale
  ScalarKeyFrameAnimation ScalarAnimation_1_to_1()
  {
    // Frame 0.
    if (_scalarAnimation_1_to_1 != nullptr)
    {
      return _scalarAnimation_1_to_1;
    }
    const auto result = _scalarAnimation_1_to_1 =
      CreateScalarKeyFrameAnimation(0.0F, 1.0F, HoldThenStepEasingFunction());
    // Frame 8.
    result.InsertKeyFrame(
      0.156862751F, 0.899999976F,
      _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.839999974F, 1.0F }));
    // Frame 16.
    result.InsertKeyFrame(
      0.313725501F, 0.980000019F,
      _c.CreateCubicBezierEasingFunction({ 0.186000004F, 0.0F }, { 0.231000006F, 1.0F }));
    // Frame 23.
    result.InsertKeyFrame(0.450980395F, 0.980000019F, CubicBezierEasingFunction_0());
    // Frame 25.
    result.InsertKeyFrame(
      0.490196079F, 1.20000005F,
      _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.839999974F, 1.0F }));
    // Frame 31.
    result.InsertKeyFrame(
      0.607843161F, 1.0F,
      _c.CreateCubicBezierEasingFunction({ 0.186000004F, 0.0F }, { 0.666999996F, 1.0F }));
    return result;
  }

  // TEnd
  ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0p66()
  {
    // Frame 0.
    if (_tEndScalarAnimation_1_to_0p66 != nullptr)
    {
      return _tEndScalarAnimation_1_to_0p66;
    }
    const auto result = _tEndScalarAnimation_1_to_0p66 =
      CreateScalarKeyFrameAnimation(0.0F, 1.0F, StepThenHoldEasingFunction());
    // Frame 24.
    result.InsertKeyFrame(0.470588237F, 1.0F, HoldThenStepEasingFunction());
    // Frame 25.
    result.InsertKeyFrame(0.490196079F, 0.660000026F, CubicBezierEasingFunction_0());
    return result;
  }

  // TStart
  ScalarKeyFrameAnimation TStartScalarAnimation_1_to_1()
  {
    // Frame 0.
    if (_tStartScalarAnimation_1_to_1 != nullptr)
    {
      return _tStartScalarAnimation_1_to_1;
    }
    const auto result = _tStartScalarAnimation_1_to_1 =
      CreateScalarKeyFrameAnimation(0.0F, 1.0F, StepThenHoldEasingFunction());
    // Frame 11.
    result.InsertKeyFrame(0.215686277F, 1.0F, HoldThenStepEasingFunction());
    // Frame 15.
    result.InsertKeyFrame(
      0.294117659F, 0.25F,
      _c.CreateCubicBezierEasingFunction({ 0.335999995F, 0.0F }, { 0.634000003F, 0.995999992F }));
    // Frame 25.
    result.InsertKeyFrame(
      0.490196079F, 0.25F,
      _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.634000003F, 1.0F }));
    // Frame 30.
    result.InsertKeyFrame(
      0.588235319F, 1.0F,
      _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.663999975F, 1.0F }));
    return result;
  }

  // Layer aggregator
  ShapeVisual ShapeVisual_0()
  {
    const auto result = _c.CreateShapeVisual();
    result.Size({ 80.0F, 80.0F });
    const auto shapes = result.Shapes();
    // Layer: rays
    shapes.Append(ContainerShape_0());
    shapes.Append(ContainerShape_1());
    return result;
  }

  StepEasingFunction HoldThenStepEasingFunction()
  {
    if (_holdThenStepEasingFunction != nullptr)
    {
      return _holdThenStepEasingFunction;
    }
    const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
    result.IsFinalStepSingleFrame(true);
    return result;
  }

  StepEasingFunction StepThenHoldEasingFunction()
  {
    if (_stepThenHoldEasingFunction != nullptr)
    {
      return _stepThenHoldEasingFunction;
    }
    const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
    result.IsInitialStepSingleFrame(true);
    return result;
  }

  // - - Layer aggregator
  // ShapeGroup: Group 1
  // Scale
  Vector2KeyFrameAnimation ScaleVector2Animation()
  {
    // Frame 0.
    const auto result =
      CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, StepThenHoldEasingFunction());
    // Frame 8.
    result.InsertKeyFrame(0.156862751F, { 1.0F, 1.0F }, HoldThenStepEasingFunction());
    // Frame 11.
    result.InsertKeyFrame(
      0.215686277F, { 0.765690029F, 0.765690029F },
      _c.CreateCubicBezierEasingFunction({ 0.48300001F, 0.0F }, { 0.638000011F, 0.460999995F }));
    // Frame 16.
    result.InsertKeyFrame(0.313725501F, { 0.600000024F, 0.600000024F },
                          _c.CreateCubicBezierEasingFunction({ 0.181999996F, 0.640999973F },
                                                             { 0.451999992F, 0.991999984F }));
    // Frame 23.
    result.InsertKeyFrame(0.450980395F, { 0.600000024F, 0.600000024F },
                          CubicBezierEasingFunction_0());
    // Frame 31.
    result.InsertKeyFrame(
      0.607843161F, { 1.0F, 1.0F },
      _c.CreateCubicBezierEasingFunction({ 0.638999999F, 0.00800000038F }, { 0.666999996F, 1.0F }));
    return result;
  }

  // - Layer aggregator
  // Layer: rays
  Vector2KeyFrameAnimation ShapeVisibilityAnimation()
  {
    // Frame 0.
    const auto result =
      CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, HoldThenStepEasingFunction());
    // Frame 11.
    result.InsertKeyFrame(0.215686277F, { 1.0F, 1.0F }, HoldThenStepEasingFunction());
    // Frame 28.
    result.InsertKeyFrame(0.549019635F, { 0.0F, 0.0F }, HoldThenStepEasingFunction());
    return result;
  }

  static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
  {
    return geo.as<IGeometrySource2D>();
  }

public:
  Moon_AnimatedVisual(Compositor compositor)
    : _c{ compositor }
    , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
  {
    winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
    const auto _ = Root();
  }

  void Close()
  {
    if (_root)
    {
      _root.Close();
    }
  }

  TimeSpan Duration() const { return TimeSpan{ c_durationTicks }; }

  Visual RootVisual() const { return _root; }

  float2 Size() const { return { 80.0F, 80.0F }; }

  void CreateAnimations()
  {
    _animatedColorBrush_Black_to_Black_0.StartAnimation(L"Color", ColorAnimation_Black_to_Black_0(),
                                                        AnimationController_0());
    _animatedColorBrush_Black_to_Black_1.StartAnimation(L"Color", ColorAnimation_Black_to_Black_1(),
                                                        AnimationController_0());
    _containerShape_0.StartAnimation(L"Scale", ShapeVisibilityAnimation(), AnimationController_0());
    _containerShape_1.StartAnimation(L"Scale.X", ScalarAnimation_1_to_1(), AnimationController_0());
    _containerShape_1.StartAnimation(L"Scale.Y", ScalarAnimation_1_to_1(), AnimationController_0());
    _pathGeometry_0.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_0.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_1.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_1.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_2.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_2.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_3.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_3.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_4.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_4.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_5.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_5.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_6.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_6.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_7.StartAnimation(L"TStart", TStartScalarAnimation_1_to_1(),
                                   AnimationController_0());
    _pathGeometry_7.StartAnimation(L"TEnd", TEndScalarAnimation_1_to_0p66(),
                                   AnimationController_0());
    _pathGeometry_8.StartAnimation(L"Path", PathKeyFrameAnimation_0(), AnimationController_0());
    _spriteShape_8.StartAnimation(L"Scale", ScaleVector2Animation(), AnimationController_0());
  }

  void DestroyAnimations()
  {
    _animatedColorBrush_Black_to_Black_0.StopAnimation(L"Color");
    _animatedColorBrush_Black_to_Black_1.StopAnimation(L"Color");
    _containerShape_0.StopAnimation(L"Scale");
    _containerShape_1.StopAnimation(L"Scale.X");
    _containerShape_1.StopAnimation(L"Scale.Y");
    _pathGeometry_0.StopAnimation(L"TStart");
    _pathGeometry_0.StopAnimation(L"TEnd");
    _pathGeometry_1.StopAnimation(L"TStart");
    _pathGeometry_1.StopAnimation(L"TEnd");
    _pathGeometry_2.StopAnimation(L"TStart");
    _pathGeometry_2.StopAnimation(L"TEnd");
    _pathGeometry_3.StopAnimation(L"TStart");
    _pathGeometry_3.StopAnimation(L"TEnd");
    _pathGeometry_4.StopAnimation(L"TStart");
    _pathGeometry_4.StopAnimation(L"TEnd");
    _pathGeometry_5.StopAnimation(L"TStart");
    _pathGeometry_5.StopAnimation(L"TEnd");
    _pathGeometry_6.StopAnimation(L"TStart");
    _pathGeometry_6.StopAnimation(L"TEnd");
    _pathGeometry_7.StopAnimation(L"TStart");
    _pathGeometry_7.StopAnimation(L"TEnd");
    _pathGeometry_8.StopAnimation(L"Path");
    _spriteShape_8.StopAnimation(L"Scale");
  }
};

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Moon::TryCreateAnimatedVisual(
  Compositor const & compositor)
{
  IInspectable diagnostics = nullptr;
  return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Moon::TryCreateAnimatedVisual(
  Compositor const & compositor, IInspectable & diagnostics)
{
  diagnostics = nullptr;
  auto result = winrt::make<Moon_AnimatedVisual>(compositor);
  result.CreateAnimations();
  return result;
}

double Moon::FrameCount()
{
  return 51.0;
}

double Moon::Framerate()
{
  return 30.0;
}

TimeSpan Moon::Duration()
{
  return TimeSpan{ 17000000L };
}

double Moon::FrameToProgress(double frameNumber)
{
  return frameNumber / 51.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> Moon::Markers()
{
  return winrt::single_threaded_map<winrt::hstring, double>(
           std::map<winrt::hstring, double>{
             { L"DarkToLight_Start", 0.0 },
             { L"DarkToLight_End", 0.314705882352941 },
             { L"LightToDark_Start", 0.451960784313725 },
             { L"LightToDark_End", 0.746078431372549 },
           })
    .GetView();
}

void Moon::SetColorProperty(hstring const &, Color)
{
}

void Moon::SetScalarProperty(hstring const &, double)
{
}
}  // namespace winrt::SuiteInstaller::implementation
