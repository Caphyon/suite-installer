//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.0.280224.1+42b1fb4fd6
//
//       Command:
//           LottieGen -GenerateColorBindings -Language Cppwinrt -Namespace SuiteInstaller
//           -WinUIVersion 3.0 -InputFile homeIcon.json
//
//       Input file:
//           homeIcon.json (10020 bytes created 12:05+02:00 Nov 22 2024)
//
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    71 |
// |--------------------------+-------|
// | Expression animators     |     3 |
// | KeyFrame animators       |    10 |
// | Reference parameters     |     3 |
// | Expression operations    |     8 |
// |--------------------------+-------|
// | Animated brushes         |     2 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     2 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |     2 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "stdafx.h"
#include "HomeIcon.h"
#if __has_include("HomeIcon.g.cpp")
#include "HomeIcon.g.cpp"
#endif
#include "d2d1.h"
#include <Windows.Graphics.Interop.h>
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <winrt/Microsoft.UI.Composition.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.Foundation.Metadata.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI;
using namespace winrt::Microsoft::UI::Composition;
using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using Color                  = winrt::Windows::UI::Color;
using CompositionPropertySet = winrt::Microsoft::UI::Composition::CompositionPropertySet;
using TimeSpan               = winrt::Windows::Foundation::TimeSpan;

namespace winrt::SuiteInstaller::implementation
{
class CanvasGeometry
  : public winrt::implements<CanvasGeometry,
                             IGeometrySource2D,
                             ::ABI::Windows::Graphics::IGeometrySource2DInterop>
{
  winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
  CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
    : _geometry{ geometry }
  {
  }

  // IGeometrySource2D.
  winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

  // IGeometrySource2DInterop.
  IFACEMETHODIMP GetGeometry(ID2D1Geometry ** value) noexcept(true) override
  {
    _geometry.copy_to(value);
    return S_OK;
  }

  // IGeometrySource2DInterop.
  IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory *,
                                            ID2D1Geometry **) noexcept(true) override
  {
    return E_NOTIMPL;
  }
};
class HomeIcon_AnimatedVisual
  : public winrt::implements<HomeIcon_AnimatedVisual,
                             winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2,
                             winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
                             IClosable>
{
  winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
  static constexpr int64_t     c_durationTicks{ 20333333L };
  Compositor const             _c{ nullptr };
  ExpressionAnimation const    _reusableExpressionAnimation{ nullptr };
  CompositionPropertySet const _themeProperties{ nullptr };
  AnimationController          _animationController_0{ nullptr };
  CompositionColorBrush        _themeColor_Foreground{ nullptr };
  CompositionColorBrush        _themeColor_AccentColor{ nullptr };
  CompositionContainerShape    _containerShape_0{ nullptr };
  CompositionContainerShape    _containerShape_1{ nullptr };
  CompositionContainerShape    _containerShape_2{ nullptr };
  CompositionPath              _path_0{ nullptr };
  CompositionPath              _path_1{ nullptr };
  CompositionPathGeometry      _pathGeometry_0{ nullptr };
  CompositionPathGeometry      _pathGeometry_1{ nullptr };
  CompositionSpriteShape       _spriteShape_0{ nullptr };
  CompositionSpriteShape       _spriteShape_1{ nullptr };
  ContainerVisual              _root{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_0{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_1{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_2{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_3{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_4{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_5{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_6{ nullptr };
  CubicBezierEasingFunction    _cubicBezierEasingFunction_7{ nullptr };
  ScalarKeyFrameAnimation      _rotationAngleInDegreesScalarAnimation_0_to_0{ nullptr };
  StepEasingFunction           _holdThenStepEasingFunction{ nullptr };
  StepEasingFunction           _stepThenHoldEasingFunction{ nullptr };
  Vector2KeyFrameAnimation     _offsetVector2Animation{ nullptr };

  void BindProperty(CompositionObject target,
                    winrt::hstring    animatedPropertyName,
                    winrt::hstring    expression,
                    winrt::hstring    referenceParameterName,
                    CompositionObject referencedObject)
  {
    _reusableExpressionAnimation.ClearAllParameters();
    _reusableExpressionAnimation.Expression(expression);
    _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
    target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
  }

  PathKeyFrameAnimation CreatePathKeyFrameAnimation(float                     initialProgress,
                                                    CompositionPath           initialValue,
                                                    CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreatePathKeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(
    float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreateScalarKeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(
    float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
  {
    const auto result = _c.CreateVector2KeyFrameAnimation();
    result.Duration(TimeSpan{ c_durationTicks });
    result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
    return result;
  }

  AnimationController AnimationController_0()
  {
    if (_animationController_0 != nullptr)
    {
      return _animationController_0;
    }
    const auto result = _animationController_0 = _c.CreateAnimationController();
    result.Pause();
    BindProperty(_animationController_0, L"Progress", L"_.Progress", L"_", _root);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_0()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 22.9482498F, -21.0858879F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 24.6267128F, -19.6636505F }, { 26.0F, -16.7000008F }, { 26.0F, -14.5F } });
    sink->AddBezier({ { 26.0F, -14.5F }, { 26.0F, 13.875F }, { 26.0F, 13.875F } });
    sink->AddBezier(
      { { 26.0F, 16.0750008F }, { 24.2000351F, 17.8862495F }, { 22.0000782F, 17.8999996F } });
    sink->AddBezier(
      { { 22.0000782F, 17.8999996F }, { 9.9999218F, 17.9750004F }, { 9.9999218F, 17.9750004F } });
    sink->AddBezier({ { 7.7999649F, 17.9887505F }, { 6.0F, 16.2000008F }, { 6.0F, 14.0F } });
    sink->AddBezier({ { 6.0F, 14.0F }, { 6.0F, -1.78799999F }, { 6.0F, -1.78799999F } });
    sink->AddBezier(
      { { 6.0F, -3.98799992F }, { 4.19999981F, -5.78800011F }, { 2.0F, -5.78800011F } });
    sink->AddBezier({ { 2.0F, -5.78800011F }, { -3.0F, -5.78800011F }, { -3.0F, -5.78800011F } });
    sink->AddBezier(
      { { -5.19999981F, -5.78800011F }, { -7.0F, -3.98799992F }, { -7.0F, -1.78799999F } });
    sink->AddBezier({ { -7.0F, -1.78799999F }, { -7.0F, 14.0030003F }, { -7.0F, 14.0030003F } });
    sink->AddBezier(
      { { -7.0F, 16.2029991F }, { -8.79995918F, 17.9908733F }, { -10.9999094F, 17.9760532F } });
    sink->AddBezier({ { -10.9999094F, 17.9760532F },
                      { -22.0000916F, 17.901947F },
                      { -22.0000916F, 17.901947F } });
    sink->AddBezier(
      { { -24.2000408F, 17.8871269F }, { -26.0F, 16.0750008F }, { -26.0F, 13.875F } });
    sink->AddBezier({ { -26.0F, 13.875F }, { -26.0F, -14.5F }, { -26.0F, -14.5F } });
    sink->AddBezier(
      { { -26.0F, -16.7000008F }, { -24.6267128F, -19.6636505F }, { -22.9482498F, -21.0858879F } });
    sink->AddBezier({ { -22.9482498F, -21.0858879F },
                      { -3.05175018F, -37.9451103F },
                      { -3.05175018F, -37.9451103F } });
    sink->AddBezier({ { -1.37328756F, -39.3673515F },
                      { 1.37328756F, -39.3673515F },
                      { 3.05175018F, -37.9451103F } });
    sink->AddBezier({ { 3.05175018F, -37.9451103F },
                      { 22.9482498F, -21.0858879F },
                      { 22.9482498F, -21.0858879F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - Layer aggregator
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_1()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 26.996439F, -27.0871582F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 28.7017479F, -25.6972198F },
                      { 29.9074287F, -22.77001F },
                      { 29.6757298F, -20.5822449F } });
    sink->AddBezier({ { 29.6757298F, -20.5822449F },
                      { 26.4212704F, 10.1472454F },
                      { 26.4212704F, 10.1472454F } });
    sink->AddBezier(
      { { 26.1895714F, 12.3350105F }, { 24.2000046F, 14.1288395F }, { 22.0000095F, 14.1335335F } });
    sink->AddBezier(
      { { 22.0000095F, 14.1335335F }, { 10.7809906F, 14.1574669F }, { 10.7809906F, 14.1574669F } });
    sink->AddBezier(
      { { 8.58099556F, 14.1621599F }, { 6.97319317F, 12.3762903F }, { 7.20809555F, 10.1888666F } });
    sink->AddBezier({ { 7.20809555F, 10.1888666F },
                      { 9.35990429F, -9.84886646F },
                      { 9.35990429F, -9.84886646F } });
    sink->AddBezier({ { 9.59480667F, -12.0362902F },
                      { 7.98699999F, -13.8260002F },
                      { 5.78700018F, -13.8260002F } });
    sink->AddBezier({ { 5.78700018F, -13.8260002F },
                      { -6.77099991F, -13.8260002F },
                      { -6.77099991F, -13.8260002F } });
    sink->AddBezier({ { -8.97099972F, -13.8260002F },
                      { -10.5798388F, -12.0361795F },
                      { -10.3461971F, -9.84862137F } });
    sink->AddBezier({ { -10.3461971F, -9.84862137F },
                      { -8.20580292F, 10.1916208F },
                      { -8.20580292F, 10.1916208F } });
    sink->AddBezier({ { -7.97216129F, 12.37918F },
                      { -9.58099461F, 14.1646528F },
                      { -11.7809887F, 14.1593399F } });
    sink->AddBezier({ { -11.7809887F, 14.1593399F },
                      { -22.0000114F, 14.1346598F },
                      { -22.0000114F, 14.1346598F } });
    sink->AddBezier({ { -24.2000046F, 14.1293468F },
                      { -26.1967049F, 12.3357801F },
                      { -26.4371223F, 10.1489563F } });
    sink->AddBezier({ { -26.4371223F, 10.1489563F },
                      { -29.815876F, -20.5839558F },
                      { -29.815876F, -20.5839558F } });
    sink->AddBezier({ { -30.0562954F, -22.7707806F },
                      { -28.8548737F, -25.6936855F },
                      { -27.1460552F, -27.0793037F } });
    sink->AddBezier({ { -27.1460552F, -27.0793037F },
                      { -3.10694551F, -46.5716972F },
                      { -3.10694551F, -46.5716972F } });
    sink->AddBezier({ { -1.39812553F, -47.9573135F },
                      { 1.39525223F, -47.9537811F },
                      { 3.10056067F, -46.5638428F } });
    sink->AddBezier({ { 3.10056067F, -46.5638428F },
                      { 26.996439F, -27.0871582F },
                      { 26.996439F, -27.0871582F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - Layer aggregator
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_2()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 23.0162983F, -21.1867657F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 24.6952839F, -19.7651443F },
                      { 26.0655899F, -16.8020039F },
                      { 26.0614204F, -14.6020069F } });
    sink->AddBezier(
      { { 26.0614204F, -14.6020069F }, { 26.0075798F, 13.812007F }, { 26.0075798F, 13.812007F } });
    sink->AddBezier(
      { { 26.0034103F, 16.0120029F }, { 24.2000332F, 17.8230762F }, { 22.0000763F, 17.8366146F } });
    sink->AddBezier(
      { { 22.0000763F, 17.8366146F }, { 10.0129242F, 17.9103851F }, { 10.0129242F, 17.9103851F } });
    sink->AddBezier(
      { { 7.81296587F, 17.9239235F }, { 6.01684761F, 16.135004F }, { 6.02155066F, 13.935009F } });
    sink->AddBezier({ { 6.02155066F, 13.935009F },
                      { 6.05544949F, -1.92300916F },
                      { 6.05544949F, -1.92300916F } });
    sink->AddBezier({ { 6.06015205F, -4.12300396F },
                      { 4.26399994F, -5.92299986F },
                      { 2.06399989F, -5.92299986F } });
    sink->AddBezier({ { 2.06399989F, -5.92299986F },
                      { -3.06399989F, -5.92299986F },
                      { -3.06399989F, -5.92299986F } });
    sink->AddBezier({ { -5.26399994F, -5.92299986F },
                      { -7.06015301F, -4.12300396F },
                      { -7.05545092F, -1.92300916F } });
    sink->AddBezier({ { -7.05545092F, -1.92300916F },
                      { -7.02154922F, 13.9390087F },
                      { -7.02154922F, 13.9390087F } });
    sink->AddBezier({ { -7.01684713F, 16.1390038F },
                      { -8.81295967F, 17.92696F },
                      { -11.0129108F, 17.9122448F } });
    sink->AddBezier({ { -11.0129108F, 17.9122448F },
                      { -22.0000896F, 17.8387547F },
                      { -22.0000896F, 17.8387547F } });
    sink->AddBezier({ { -24.2000408F, 17.8240395F },
                      { -26.0035591F, 16.0120029F },
                      { -26.0079098F, 13.8120079F } });
    sink->AddBezier({ { -26.0079098F, 13.8120079F },
                      { -26.0640907F, -14.6020079F },
                      { -26.0640907F, -14.6020079F } });
    sink->AddBezier({ { -26.0684414F, -16.8020039F },
                      { -24.6982193F, -19.7650661F },
                      { -23.0191517F, -21.1865921F } });
    sink->AddBezier({ { -23.0191517F, -21.1865921F },
                      { -3.05284762F, -38.0904083F },
                      { -3.05284762F, -38.0904083F } });
    sink->AddBezier({ { -1.37378144F, -39.5119324F },
                      { 1.37371552F, -39.5118561F },
                      { 3.052701F, -38.0902328F } });
    sink->AddBezier({ { 3.052701F, -38.0902328F },
                      { 23.0162983F, -21.1867657F },
                      { 23.0162983F, -21.1867657F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - Layer aggregator
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_3()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 24.3029728F, -12.3669033F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 26.1592388F, -11.1861067F },
                      { 27.8751183F, -8.43082619F },
                      { 28.1160431F, -6.24405766F } });
    sink->AddBezier(
      { { 28.1160431F, -6.24405766F }, { 30.7119579F, 17.318058F }, { 30.7119579F, 17.318058F } });
    sink->AddBezier(
      { { 30.9528809F, 19.5048256F }, { 29.3500347F, 21.3052502F }, { 27.1500778F, 21.3190002F } });
    sink->AddBezier(
      { { 27.1500778F, 21.3190002F }, { 15.1499214F, 21.394001F }, { 15.1499214F, 21.394001F } });
    sink->AddBezier(
      { { 12.9499645F, 21.4077511F }, { 10.8656683F, 19.6415977F }, { 10.5181513F, 17.4692192F } });
    sink->AddBezier(
      { { 10.5181513F, 17.4692192F }, { 8.30984879F, 3.66478062F }, { 8.30984879F, 3.66478062F } });
    sink->AddBezier({ { 7.96233177F, 1.49240136F },
                      { 5.87799978F, -0.284999996F },
                      { 3.67799997F, -0.284999996F } });
    sink->AddBezier({ { 3.67799997F, -0.284999996F },
                      { -5.48899984F, -0.284999996F },
                      { -5.48899984F, -0.284999996F } });
    sink->AddBezier({ { -7.68900013F, -0.284999996F },
                      { -9.7732811F, 1.49240947F },
                      { -10.1207352F, 3.66479874F } });
    sink->AddBezier({ { -10.1207352F, 3.66479874F },
                      { -12.3292646F, 17.4732018F },
                      { -12.3292646F, 17.4732018F } });
    sink->AddBezier(
      { { -12.6767197F, 19.6455898F }, { -14.7609587F, 21.41078F }, { -16.960907F, 21.3958435F } });
    sink->AddBezier(
      { { -16.960907F, 21.3958435F }, { -27.961092F, 21.3211575F }, { -27.961092F, 21.3211575F } });
    sink->AddBezier({ { -30.1610413F, 21.306221F },
                      { -31.7638817F, 19.5048256F },
                      { -31.5229568F, 17.318058F } });
    sink->AddBezier({ { -31.5229568F, 17.318058F },
                      { -28.927042F, -6.24405766F },
                      { -28.927042F, -6.24405766F } });
    sink->AddBezier({ { -28.6861191F, -8.43082619F },
                      { -26.9702225F, -11.1860819F },
                      { -25.1139393F, -12.3668489F } });
    sink->AddBezier({ { -25.1139393F, -12.3668489F },
                      { -3.78006148F, -25.937151F },
                      { -3.78006148F, -25.937151F } });
    sink->AddBezier({ { -1.9237777F, -27.117918F },
                      { 1.11376214F, -27.1178932F },
                      { 2.97002697F, -25.9370975F } });
    sink->AddBezier({ { 2.97002697F, -25.9370975F },
                      { 24.3029728F, -12.3669033F },
                      { 24.3029728F, -12.3669033F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - Layer aggregator
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_4()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->BeginFigure({ 26.6323681F, -28.4096928F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 28.4163647F, -27.1223125F },
                      { 29.7426548F, -24.2739468F },
                      { 29.5796795F, -22.0799904F } });
    sink->AddBezier({ { 29.5796795F, -22.0799904F },
                      { 27.2033215F, 9.90999126F },
                      { 27.2033215F, 9.90999126F } });
    sink->AddBezier(
      { { 27.0403442F, 12.1039457F }, { 25.1070309F, 13.9094353F }, { 22.9070663F, 13.9221888F } });
    sink->AddBezier(
      { { 22.9070663F, 13.9221888F }, { 9.34493256F, 14.0008116F }, { 9.34493256F, 14.0008116F } });
    sink->AddBezier(
      { { 7.14496994F, 14.0135651F }, { 5.4025569F, 12.2249203F }, { 5.47290421F, 10.0260458F } });
    sink->AddBezier({ { 5.47290421F, 10.0260458F },
                      { 5.99809551F, -6.39004564F },
                      { 5.99809551F, -6.39004564F } });
    sink->AddBezier({ { 6.06844282F, -8.58892059F },
                      { 4.32600021F, -10.3879995F },
                      { 2.12599993F, -10.3879995F } });
    sink->AddBezier({ { 2.12599993F, -10.3879995F },
                      { -4.28000021F, -10.3879995F },
                      { -4.28000021F, -10.3879995F } });
    sink->AddBezier({ { -6.48000002F, -10.3879995F },
                      { -8.23393917F, -8.58858967F },
                      { -8.17764187F, -6.38930988F } });
    sink->AddBezier({ { -8.17764187F, -6.38930988F },
                      { -7.75735855F, 10.0293102F },
                      { -7.75735855F, 10.0293102F } });
    sink->AddBezier({ { -7.70106125F, 12.2285891F },
                      { -9.45496464F, 14.0167084F },
                      { -11.6549215F, 14.0029068F } });
    sink->AddBezier({ { -11.6549215F, 14.0029068F },
                      { -24.2180786F, 13.9240932F },
                      { -24.2180786F, 13.9240932F } });
    sink->AddBezier({ { -26.4180355F, 13.9102917F },
                      { -28.3583088F, 12.1044769F },
                      { -28.5297985F, 9.91117096F } });
    sink->AddBezier({ { -28.5297985F, 9.91117096F },
                      { -31.0312023F, -22.081171F },
                      { -31.0312023F, -22.081171F } });
    sink->AddBezier({ { -31.2026901F, -24.274477F },
                      { -29.8808079F, -27.1187592F },
                      { -28.0936852F, -28.4017982F } });
    sink->AddBezier({ { -28.0936852F, -28.4017982F },
                      { -3.90431547F, -45.7681999F },
                      { -3.90431547F, -45.7681999F } });
    sink->AddBezier({ { -2.11719203F, -47.051239F },
                      { 0.80463475F, -47.0476875F },
                      { 2.58863282F, -45.7603073F } });
    sink->AddBezier({ { 2.58863282F, -45.7603073F },
                      { 26.6323681F, -28.4096928F },
                      { 26.6323681F, -28.4096928F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  winrt::com_ptr<CanvasGeometry> Geometry_5()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->SetFillMode(D2D1_FILL_MODE_WINDING);
    sink->BeginFigure({ 23.7111874F, -20.4394169F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 24.9700336F, -19.3727379F }, { 26.0F, -17.1499996F }, { 26.0F, -15.5F } });
    sink->AddBezier({ { 26.0F, -15.5F }, { 26.0F, 14.875F }, { 26.0F, 14.875F } });
    sink->AddBezier(
      { { 26.0F, 16.5249996F }, { 24.6500263F, 17.8834381F }, { 23.0000591F, 17.8937492F } });
    sink->AddBezier(
      { { 23.0000591F, 17.8937492F }, { 8.99994183F, 17.9812508F }, { 8.99994183F, 17.9812508F } });
    sink->AddBezier({ { 7.34997368F, 17.9915619F }, { 6.0F, 16.6499996F }, { 6.0F, 15.0F } });
    sink->AddBezier({ { 6.0F, 15.0F }, { 6.0F, -2.78800011F }, { 6.0F, -2.78800011F } });
    sink->AddBezier(
      { { 6.0F, -4.4380002F }, { 4.6500001F, -5.78800011F }, { 3.0F, -5.78800011F } });
    sink->AddBezier({ { 3.0F, -5.78800011F }, { -4.0F, -5.78800011F }, { -4.0F, -5.78800011F } });
    sink->AddBezier(
      { { -5.6500001F, -5.78800011F }, { -7.0F, -4.4380002F }, { -7.0F, -2.78800011F } });
    sink->AddBezier({ { -7.0F, -2.78800011F }, { -7.0F, 15.0030003F }, { -7.0F, 15.0030003F } });
    sink->AddBezier(
      { { -7.0F, 16.6529999F }, { -8.34996891F, 17.993906F }, { -9.99993229F, 17.98279F } });
    sink->AddBezier({ { -9.99993229F, 17.98279F },
                      { -23.0000687F, 17.8952103F },
                      { -23.0000687F, 17.8952103F } });
    sink->AddBezier(
      { { -24.6500301F, 17.8840942F }, { -26.0F, 16.5249996F }, { -26.0F, 14.875F } });
    sink->AddBezier({ { -26.0F, 14.875F }, { -26.0F, -15.5F }, { -26.0F, -15.5F } });
    sink->AddBezier(
      { { -26.0F, -17.1499996F }, { -24.9700336F, -19.3727379F }, { -23.7111874F, -20.4394169F } });
    sink->AddBezier({ { -23.7111874F, -20.4394169F },
                      { -2.28881264F, -38.5915833F },
                      { -2.28881264F, -38.5915833F } });
    sink->AddBezier({ { -1.02996564F, -39.6582642F },
                      { 1.02996564F, -39.6582642F },
                      { 2.28881264F, -38.5915833F } });
    sink->AddBezier({ { 2.28881264F, -38.5915833F },
                      { 23.7111874F, -20.4394169F },
                      { 23.7111874F, -20.4394169F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - - Layer aggregator
  // - - - - - Layer: iconFill
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_6()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->SetFillMode(D2D1_FILL_MODE_WINDING);
    sink->BeginFigure({ 27.7715797F, -26.455368F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier(
      { { 29.05056F, -25.4129162F }, { 29.9548206F, -23.2175083F }, { 29.7810478F, -21.576685F } });
    sink->AddBezier(
      { { 29.7810478F, -21.576685F }, { 26.3159523F, 11.1416845F }, { 26.3159523F, 11.1416845F } });
    sink->AddBezier(
      { { 26.1421795F, 12.7825079F }, { 24.6500034F, 14.1278801F }, { 23.0000076F, 14.1314001F } });
    sink->AddBezier(
      { { 23.0000076F, 14.1314001F }, { 9.78099346F, 14.1596003F }, { 9.78099346F, 14.1596003F } });
    sink->AddBezier(
      { { 8.1309967F, 14.1631203F }, { 6.92514467F, 12.8237171F }, { 7.1013217F, 11.1831503F } });
    sink->AddBezier({ { 7.1013217F, 11.1831503F },
                      { 9.46667862F, -10.8431501F },
                      { 9.46667862F, -10.8431501F } });
    sink->AddBezier({ { 9.64285564F, -12.4837179F },
                      { 8.43700027F, -13.8260002F },
                      { 6.78700018F, -13.8260002F } });
    sink->AddBezier({ { 6.78700018F, -13.8260002F },
                      { -7.77099991F, -13.8260002F },
                      { -7.77099991F, -13.8260002F } });
    sink->AddBezier({ { -9.42099953F, -13.8260002F },
                      { -10.6276293F, -12.4836349F },
                      { -10.4523973F, -10.8429661F } });
    sink->AddBezier({ { -10.4523973F, -10.8429661F },
                      { -8.0996027F, 11.1859655F },
                      { -8.0996027F, 11.1859655F } });
    sink->AddBezier({ { -7.92437124F, 12.8266344F },
                      { -9.13099575F, 14.16574F },
                      { -10.7809916F, 14.1617546F } });
    sink->AddBezier({ { -10.7809916F, 14.1617546F },
                      { -23.0000095F, 14.1322451F },
                      { -23.0000095F, 14.1322451F } });
    sink->AddBezier({ { -24.6500034F, 14.1282606F },
                      { -26.1475296F, 12.7830849F },
                      { -26.3278427F, 11.1429672F } });
    sink->AddBezier({ { -26.3278427F, 11.1429672F },
                      { -29.9251575F, -21.5779667F },
                      { -29.9251575F, -21.5779667F } });
    sink->AddBezier({ { -30.1054707F, -23.2180843F },
                      { -29.2044067F, -25.410265F },
                      { -27.9227905F, -26.4494781F } });
    sink->AddBezier({ { -27.9227905F, -26.4494781F },
                      { -2.33020926F, -47.2015228F },
                      { -2.33020926F, -47.2015228F } });
    sink->AddBezier({ { -1.04859412F, -48.2407341F },
                      { 1.04643917F, -48.2380829F },
                      { 2.32542038F, -47.1956329F } });
    sink->AddBezier({ { 2.32542038F, -47.1956329F },
                      { 27.7715797F, -26.455368F },
                      { 27.7715797F, -26.455368F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - - Layer aggregator
  // - - - - - Layer: iconFill
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_7()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->SetFillMode(D2D1_FILL_MODE_WINDING);
    sink->BeginFigure({ 23.7794743F, -20.540575F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 25.0387135F, -19.4743595F },
                      { 26.0664425F, -17.2520027F },
                      { 26.0633144F, -15.602005F } });
    sink->AddBezier(
      { { 26.0633144F, -15.602005F }, { 26.0056839F, 14.812005F }, { 26.0056839F, 14.812005F } });
    sink->AddBezier(
      { { 26.0025578F, 16.4620018F }, { 24.6500263F, 17.8203087F }, { 23.0000572F, 17.8304615F } });
    sink->AddBezier(
      { { 23.0000572F, 17.8304615F }, { 9.01294327F, 17.9165382F }, { 9.01294327F, 17.9165382F } });
    sink->AddBezier(
      { { 7.36297464F, 17.926693F }, { 6.01588583F, 16.5850029F }, { 6.01941299F, 14.9350071F } });
    sink->AddBezier({ { 6.01941299F, 14.9350071F },
                      { 6.05758715F, -2.92300677F },
                      { 6.05758715F, -2.92300677F } });
    sink->AddBezier({ { 6.06111431F, -4.57300329F },
                      { 4.71400023F, -5.92299986F },
                      { 3.06399989F, -5.92299986F } });
    sink->AddBezier({ { 3.06399989F, -5.92299986F },
                      { -4.06400013F, -5.92299986F },
                      { -4.06400013F, -5.92299986F } });
    sink->AddBezier({ { -5.71400023F, -5.92299986F },
                      { -7.06111479F, -4.57300329F },
                      { -7.0575881F, -2.92300677F } });
    sink->AddBezier({ { -7.0575881F, -2.92300677F },
                      { -7.01941204F, 14.9390068F },
                      { -7.01941204F, 14.9390068F } });
    sink->AddBezier({ { -7.01588535F, 16.5890026F },
                      { -8.3629694F, 17.9299698F },
                      { -10.0129328F, 17.9189339F } });
    sink->AddBezier({ { -10.0129328F, 17.9189339F },
                      { -23.0000668F, 17.8320656F },
                      { -23.0000668F, 17.8320656F } });
    sink->AddBezier({ { -24.6500301F, 17.8210297F },
                      { -26.0026684F, 16.4620018F },
                      { -26.0059319F, 14.812006F } });
    sink->AddBezier({ { -26.0059319F, 14.812006F },
                      { -26.0660686F, -15.602006F },
                      { -26.0660686F, -15.602006F } });
    sink->AddBezier({ { -26.0693302F, -17.2520027F },
                      { -25.0416641F, -19.4743004F },
                      { -23.7823639F, -20.5404453F } });
    sink->AddBezier({ { -23.7823639F, -20.5404453F },
                      { -2.2896359F, -38.736557F },
                      { -2.2896359F, -38.736557F } });
    sink->AddBezier({ { -1.03033614F, -39.8027F },
                      { 1.03028655F, -39.8026428F },
                      { 2.28952575F, -38.7364235F } });
    sink->AddBezier({ { 2.28952575F, -38.7364235F },
                      { 23.7794743F, -20.540575F },
                      { 23.7794743F, -20.540575F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - - Layer aggregator
  // - - - - - Layer: iconFill
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_8()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->SetFillMode(D2D1_FILL_MODE_WINDING);
    sink->BeginFigure({ 25.1467304F, -11.8301773F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier(
      { { 26.538929F, -10.9445801F }, { 27.82584F, -8.87811947F }, { 28.0065327F, -7.23804331F } });
    sink->AddBezier({ { 28.0065327F, -7.23804331F },
                      { 30.8214684F, 18.3120422F },
                      { 30.8214684F, 18.3120422F } });
    sink->AddBezier(
      { { 31.002161F, 19.9521198F }, { 29.8000259F, 21.3024368F }, { 28.1500587F, 21.3127499F } });
    sink->AddBezier(
      { { 28.1500587F, 21.3127499F }, { 14.1499414F, 21.4002495F }, { 14.1499414F, 21.4002495F } });
    sink->AddBezier(
      { { 12.4999733F, 21.4105625F }, { 10.9367514F, 20.0859489F }, { 10.6761141F, 18.456665F } });
    sink->AddBezier(
      { { 10.6761141F, 18.456665F }, { 8.15188599F, 2.6773355F }, { 8.15188599F, 2.6773355F } });
    sink->AddBezier({ { 7.8912487F, 1.048051F },
                      { 6.32800007F, -0.284999996F },
                      { 4.67799997F, -0.284999996F } });
    sink->AddBezier({ { 4.67799997F, -0.284999996F },
                      { -6.48899984F, -0.284999996F },
                      { -6.48899984F, -0.284999996F } });
    sink->AddBezier({ { -8.13899994F, -0.284999996F },
                      { -9.70221043F, 1.04805708F },
                      { -9.96280098F, 2.67734909F } });
    sink->AddBezier({ { -9.96280098F, 2.67734909F },
                      { -12.4871988F, 18.4606514F },
                      { -12.4871988F, 18.4606514F } });
    sink->AddBezier({ { -12.7477894F, 20.0899429F },
                      { -14.3109694F, 21.4138336F },
                      { -15.9609308F, 21.4026318F } });
    sink->AddBezier({ { -15.9609308F, 21.4026318F },
                      { -28.9610691F, 21.3143673F },
                      { -28.9610691F, 21.3143673F } });
    sink->AddBezier({ { -30.6110306F, 21.3031654F },
                      { -31.8131599F, 19.9521198F },
                      { -31.6324673F, 18.3120422F } });
    sink->AddBezier({ { -31.6324673F, 18.3120422F },
                      { -28.8175316F, -7.23804331F },
                      { -28.8175316F, -7.23804331F } });
    sink->AddBezier({ { -28.6368389F, -8.87811947F },
                      { -27.3499165F, -10.944561F },
                      { -25.9577045F, -11.8301363F } });
    sink->AddBezier({ { -25.9577045F, -11.8301363F },
                      { -2.93629622F, -26.4738636F },
                      { -2.93629622F, -26.4738636F } });
    sink->AddBezier({ { -1.54408324F, -27.3594379F },
                      { 0.734071612F, -27.3594208F },
                      { 2.12627029F, -26.4738235F } });
    sink->AddBezier({ { 2.12627029F, -26.4738235F },
                      { 25.1467304F, -11.8301773F },
                      { 25.1467304F, -11.8301773F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - - - - - Layer aggregator
  // - - - - - Layer: iconFill
  // - - - ShapeGroup: House
  // - Path
  winrt::com_ptr<CanvasGeometry> Geometry_9()
  {
    winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
    winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
    winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
    winrt::check_hresult(path->Open(sink.put()));
    sink->SetFillMode(D2D1_FILL_MODE_WINDING);
    sink->BeginFigure({ 27.4432755F, -27.8245201F }, D2D1_FIGURE_BEGIN_FILLED);
    sink->AddBezier({ { 28.7812748F, -26.858984F },
                      { 29.7759914F, -24.7227097F },
                      { 29.653759F, -23.0772438F } });
    sink->AddBezier(
      { { 29.653759F, -23.0772438F }, { 27.12924F, 10.9072428F }, { 27.12924F, 10.9072428F } });
    sink->AddBezier(
      { { 27.0070076F, 12.5527096F }, { 25.5570221F, 13.906826F }, { 23.9070511F, 13.9163914F } });
    sink->AddBezier(
      { { 23.9070511F, 13.9163914F }, { 8.34494972F, 14.006609F }, { 8.34494972F, 14.006609F } });
    sink->AddBezier(
      { { 6.69497728F, 14.0161743F }, { 5.38816786F, 12.6746902F }, { 5.44092846F, 11.0255337F } });
    sink->AddBezier(
      { { 5.44092846F, 11.0255337F }, { 6.03007174F, -7.389534F }, { 6.03007174F, -7.389534F } });
    sink->AddBezier({ { 6.08283234F, -9.03869057F },
                      { 4.77600002F, -10.3879995F },
                      { 3.12599993F, -10.3879995F } });
    sink->AddBezier({ { 3.12599993F, -10.3879995F },
                      { -5.28000021F, -10.3879995F },
                      { -5.28000021F, -10.3879995F } });
    sink->AddBezier({ { -6.92999983F, -10.3879995F },
                      { -8.24545383F, -9.03844166F },
                      { -8.20323086F, -7.3889823F } });
    sink->AddBezier({ { -8.20323086F, -7.3889823F },
                      { -7.73176861F, 11.0289822F },
                      { -7.73176861F, 11.0289822F } });
    sink->AddBezier({ { -7.68954611F, 12.678442F },
                      { -9.00497341F, 14.0195312F },
                      { -10.6549406F, 14.0091801F } });
    sink->AddBezier(
      { { -10.6549406F, 14.0091801F }, { -25.2180595F, 13.91782F }, { -25.2180595F, 13.91782F } });
    sink->AddBezier({ { -26.8680267F, 13.9074688F },
                      { -28.3232327F, 12.5531073F },
                      { -28.451849F, 10.9081278F } });
    sink->AddBezier({ { -28.451849F, 10.9081278F },
                      { -31.1091518F, -23.0781288F },
                      { -31.1091518F, -23.0781288F } });
    sink->AddBezier({ { -31.2377682F, -24.7231083F },
                      { -30.246357F, -26.8563194F },
                      { -28.9060135F, -27.8185997F } });
    sink->AddBezier({ { -28.9060135F, -27.8185997F },
                      { -3.09198666F, -46.3514023F },
                      { -3.09198666F, -46.3514023F } });
    sink->AddBezier({ { -1.75164402F, -47.3136787F },
                      { 0.439726055F, -47.3110161F },
                      { 1.7777245F, -46.3454781F } });
    sink->AddBezier({ { 1.7777245F, -46.3454781F },
                      { 27.4432755F, -27.8245201F },
                      { 27.4432755F, -27.8245201F } });
    sink->EndFigure(D2D1_FIGURE_END_CLOSED);
    winrt::check_hresult(sink->Close());
    auto result = winrt::make_self<CanvasGeometry>(path);
    return result;
  }

  // - - Layer aggregator
  // ShapeGroup: House
  // Color bound to theme property value: Foreground
  CompositionColorBrush ThemeColor_Foreground()
  {
    if (_themeColor_Foreground != nullptr)
    {
      return _themeColor_Foreground;
    }
    const auto result = _themeColor_Foreground = _c.CreateColorBrush();
    BindProperty(
      _themeColor_Foreground, L"Color",
      L"ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)",
      L"_theme", _themeProperties);
    return result;
  }

  // - - - Layer aggregator
  // - - Layer: iconFill
  // ShapeGroup: House
  // Color bound to theme property value: AccentColor
  CompositionColorBrush ThemeColor_AccentColor()
  {
    if (_themeColor_AccentColor != nullptr)
    {
      return _themeColor_AccentColor;
    }
    const auto result = _themeColor_AccentColor = _c.CreateColorBrush();
    BindProperty(_themeColor_AccentColor, L"Color",
                 L"ColorRGB(_theme.AccentColor.W,_theme.AccentColor.X,_theme.AccentColor.Y,_"
                 L"theme.AccentColor.Z)",
                 L"_theme", _themeProperties);
    return result;
  }

  // Layer aggregator
  CompositionContainerShape ContainerShape_0()
  {
    if (_containerShape_0 != nullptr)
    {
      return _containerShape_0;
    }
    const auto result = _containerShape_0 = _c.CreateContainerShape();
    result.CenterPoint({ 0.0F, -10.7040005F });
    result.Offset({ 48.0F, 71.2539978F });
    // ShapeGroup: House
    result.Shapes().Append(SpriteShape_0());
    return result;
  }

  // Layer aggregator
  // Layer: iconFill
  CompositionContainerShape ContainerShape_1()
  {
    if (_containerShape_1 != nullptr)
    {
      return _containerShape_1;
    }
    const auto result = _containerShape_1 = _c.CreateContainerShape();
    result.Scale({ 0.0F, 0.0F });
    result.Shapes().Append(ContainerShape_2());
    return result;
  }

  // - Layer aggregator
  // Layer: iconFill
  CompositionContainerShape ContainerShape_2()
  {
    if (_containerShape_2 != nullptr)
    {
      return _containerShape_2;
    }
    const auto result = _containerShape_2 = _c.CreateContainerShape();
    result.CenterPoint({ 0.0F, -10.7040005F });
    result.Offset({ 48.0F, 71.2539978F });
    // ShapeGroup: House
    result.Shapes().Append(SpriteShape_1());
    return result;
  }

  CompositionPath Path_0()
  {
    if (_path_0 != nullptr)
    {
      return _path_0;
    }
    const auto result = _path_0 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0()));
    return result;
  }

  CompositionPath Path_1()
  {
    if (_path_1 != nullptr)
    {
      return _path_1;
    }
    const auto result = _path_1 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_5()));
    return result;
  }

  // - - Layer aggregator
  // ShapeGroup: House
  CompositionPathGeometry PathGeometry_0()
  {
    if (_pathGeometry_0 != nullptr)
    {
      return _pathGeometry_0;
    }
    const auto result = _pathGeometry_0 = _c.CreatePathGeometry();
    return result;
  }

  // - - - Layer aggregator
  // - - Layer: iconFill
  // ShapeGroup: House
  CompositionPathGeometry PathGeometry_1()
  {
    if (_pathGeometry_1 != nullptr)
    {
      return _pathGeometry_1;
    }
    const auto result = _pathGeometry_1 = _c.CreatePathGeometry();
    return result;
  }

  // - Layer aggregator
  // housePath
  CompositionSpriteShape SpriteShape_0()
  {
    if (_spriteShape_0 != nullptr)
    {
      return _spriteShape_0;
    }
    const auto result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
    result.CenterPoint({ -23.625F, 15.25F });
    result.StrokeBrush(ThemeColor_Foreground());
    result.StrokeMiterLimit(2.0F);
    return result;
  }

  // - - Layer aggregator
  // - Layer: iconFill
  // housePath
  CompositionSpriteShape SpriteShape_1()
  {
    if (_spriteShape_1 != nullptr)
    {
      return _spriteShape_1;
    }
    const auto result = _spriteShape_1 = _c.CreateSpriteShape(PathGeometry_1());
    result.CenterPoint({ -23.625F, 15.25F });
    result.FillBrush(ThemeColor_AccentColor());
    return result;
  }

  // The root of the composition.
  ContainerVisual Root()
  {
    if (_root != nullptr)
    {
      return _root;
    }
    const auto result = _root = _c.CreateContainerVisual();
    const auto propertySet    = result.Properties();
    propertySet.InsertScalar(L"Progress", 0.0F);
    // Layer aggregator
    result.Children().InsertAtTop(ShapeVisual_0());
    return result;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_0()
  {
    return (_cubicBezierEasingFunction_0 == nullptr)
             ? _cubicBezierEasingFunction_0 =
                 _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.802999973F, 0.572000027F })
             : _cubicBezierEasingFunction_0;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_1()
  {
    return (_cubicBezierEasingFunction_1 == nullptr)
             ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(
                 { 0.232999995F, 0.507000029F }, { 0.833000004F, 0.833000004F })
             : _cubicBezierEasingFunction_1;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_2()
  {
    return (_cubicBezierEasingFunction_2 == nullptr)
             ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(
                 { 0.166999996F, 0.166999996F }, { 0.537999988F, 0.987999976F })
             : _cubicBezierEasingFunction_2;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_3()
  {
    return (_cubicBezierEasingFunction_3 == nullptr)
             ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(
                 { 0.166999996F, 0.0F }, { 0.386999995F, 0.967000008F })
             : _cubicBezierEasingFunction_3;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_4()
  {
    return (_cubicBezierEasingFunction_4 == nullptr)
             ? _cubicBezierEasingFunction_4 =
                 _c.CreateCubicBezierEasingFunction({ 0.68599999F, 0.0F }, { 0.546000004F, 1.0F })
             : _cubicBezierEasingFunction_4;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_5()
  {
    return (_cubicBezierEasingFunction_5 == nullptr)
             ? _cubicBezierEasingFunction_5 =
                 _c.CreateCubicBezierEasingFunction({ 0.52700001F, 0.0F }, { 0.328000009F, 1.0F })
             : _cubicBezierEasingFunction_5;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_6()
  {
    return (_cubicBezierEasingFunction_6 == nullptr)
             ? _cubicBezierEasingFunction_6 = _c.CreateCubicBezierEasingFunction(
                 { 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F })
             : _cubicBezierEasingFunction_6;
  }

  CubicBezierEasingFunction CubicBezierEasingFunction_7()
  {
    return (_cubicBezierEasingFunction_7 == nullptr)
             ? _cubicBezierEasingFunction_7 =
                 _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.666999996F, 1.0F })
             : _cubicBezierEasingFunction_7;
  }

  // - - - Layer aggregator
  // - ShapeGroup: House
  // Path
  PathKeyFrameAnimation PathKeyFrameAnimation_0()
  {
    // Frame 0.
    const auto result = CreatePathKeyFrameAnimation(0.0F, Path_0(), StepThenHoldEasingFunction());
    // Frame 1.
    result.InsertKeyFrame(0.0163934417F, Path_0(), HoldThenStepEasingFunction());
    // Frame 10.
    result.InsertKeyFrame(0.163934425F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())),
                          CubicBezierEasingFunction_0());
    // Frame 19.
    result.InsertKeyFrame(0.311475396F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())),
                          CubicBezierEasingFunction_1());
    // Frame 41.
    result.InsertKeyFrame(0.672131121F, Path_0(), CubicBezierEasingFunction_2());
    // Frame 45.
    result.InsertKeyFrame(0.737704933F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_3())),
                          CubicBezierEasingFunction_3());
    // Frame 50.
    result.InsertKeyFrame(0.819672108F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_4())),
                          CubicBezierEasingFunction_4());
    // Frame 60.
    result.InsertKeyFrame(0.983606577F, Path_0(), CubicBezierEasingFunction_5());
    return result;
  }

  // - - - - Layer aggregator
  // - - - Layer: iconFill
  // - ShapeGroup: House
  // Path
  PathKeyFrameAnimation PathKeyFrameAnimation_1()
  {
    // Frame 0.
    const auto result = CreatePathKeyFrameAnimation(0.0F, Path_1(), StepThenHoldEasingFunction());
    // Frame 1.
    result.InsertKeyFrame(0.0163934417F, Path_1(), HoldThenStepEasingFunction());
    // Frame 10.
    result.InsertKeyFrame(0.163934425F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_6())),
                          CubicBezierEasingFunction_0());
    // Frame 19.
    result.InsertKeyFrame(0.311475396F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_7())),
                          CubicBezierEasingFunction_1());
    // Frame 41.
    result.InsertKeyFrame(0.672131121F, Path_1(), CubicBezierEasingFunction_2());
    // Frame 45.
    result.InsertKeyFrame(0.737704933F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_8())),
                          CubicBezierEasingFunction_3());
    // Frame 50.
    result.InsertKeyFrame(0.819672108F,
                          CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_9())),
                          CubicBezierEasingFunction_4());
    // Frame 60.
    result.InsertKeyFrame(0.983606577F, Path_1(), CubicBezierEasingFunction_5());
    return result;
  }

  // Rotation
  ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
  {
    // Frame 0.
    if (_rotationAngleInDegreesScalarAnimation_0_to_0 != nullptr)
    {
      return _rotationAngleInDegreesScalarAnimation_0_to_0;
    }
    const auto result = _rotationAngleInDegreesScalarAnimation_0_to_0 =
      CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
    // Frame 7.
    result.InsertKeyFrame(0.114754096F, 0.0F, HoldThenStepEasingFunction());
    // Frame 11.
    result.InsertKeyFrame(0.180327863F, 6.0F, CubicBezierEasingFunction_7());
    // Frame 19.
    result.InsertKeyFrame(0.311475396F, -13.375F, CubicBezierEasingFunction_7());
    // Frame 25.
    result.InsertKeyFrame(0.409836054F, -9.25899982F,
                          _c.CreateCubicBezierEasingFunction({ 0.317000002F, 0.00300000003F },
                                                             { 0.66900003F, 0.165000007F }));
    // Frame 29.
    result.InsertKeyFrame(
      0.475409836F, 0.0F,
      _c.CreateCubicBezierEasingFunction({ 0.453999996F, 0.338999987F }, { 0.349000007F, 1.0F }));
    return result;
  }

  // - - Layer aggregator
  // ShapeGroup: House
  // StrokeThickness
  ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_3_to_3()
  {
    // Frame 0.
    const auto result = CreateScalarKeyFrameAnimation(0.0F, 3.0F, StepThenHoldEasingFunction());
    // Frame 9.
    result.InsertKeyFrame(0.147540987F, 3.0F, HoldThenStepEasingFunction());
    // Frame 10.
    result.InsertKeyFrame(0.163934425F, 0.0F, CubicBezierEasingFunction_6());
    // Frame 48.
    result.InsertKeyFrame(0.786885262F, 0.0F, CubicBezierEasingFunction_6());
    // Frame 49.
    result.InsertKeyFrame(0.803278685F, 3.0F, CubicBezierEasingFunction_6());
    return result;
  }

  // Layer aggregator
  ShapeVisual ShapeVisual_0()
  {
    const auto result = _c.CreateShapeVisual();
    result.Size({ 96.0F, 110.0F });
    const auto shapes = result.Shapes();
    shapes.Append(ContainerShape_0());
    // Layer: iconFill
    shapes.Append(ContainerShape_1());
    return result;
  }

  StepEasingFunction HoldThenStepEasingFunction()
  {
    if (_holdThenStepEasingFunction != nullptr)
    {
      return _holdThenStepEasingFunction;
    }
    const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
    result.IsFinalStepSingleFrame(true);
    return result;
  }

  StepEasingFunction StepThenHoldEasingFunction()
  {
    if (_stepThenHoldEasingFunction != nullptr)
    {
      return _stepThenHoldEasingFunction;
    }
    const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
    result.IsInitialStepSingleFrame(true);
    return result;
  }

  // Offset
  Vector2KeyFrameAnimation OffsetVector2Animation()
  {
    // Frame 0.
    if (_offsetVector2Animation != nullptr)
    {
      return _offsetVector2Animation;
    }
    const auto result = _offsetVector2Animation =
      CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, StepThenHoldEasingFunction());
    // Frame 7.
    result.InsertKeyFrame(0.114754096F, { 0.0F, 0.0F }, HoldThenStepEasingFunction());
    // Frame 11.
    result.InsertKeyFrame(0.180327863F, { 0.0F, -11.5F }, CubicBezierEasingFunction_6());
    // Frame 17.
    result.InsertKeyFrame(0.27868852F, { 0.0F, 0.0F }, CubicBezierEasingFunction_6());
    // Frame 38.
    result.InsertKeyFrame(0.622950792F, { 0.0F, 0.0F }, CubicBezierEasingFunction_6());
    // Frame 45.
    result.InsertKeyFrame(0.737704933F, { 0.0F, 2.0F }, CubicBezierEasingFunction_6());
    // Frame 50.
    result.InsertKeyFrame(0.819672108F, { 0.0F, 2.0F }, CubicBezierEasingFunction_6());
    // Frame 56.
    result.InsertKeyFrame(0.918032765F, { 0.0F, 0.0F }, CubicBezierEasingFunction_6());
    return result;
  }

  // - Layer aggregator
  // Scale
  Vector2KeyFrameAnimation ScaleVector2Animation_0()
  {
    // Frame 0.
    const auto result =
      CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, StepThenHoldEasingFunction());
    // Frame 7.
    result.InsertKeyFrame(0.114754096F, { 1.0F, 1.0F }, HoldThenStepEasingFunction());
    // Frame 9.
    result.InsertKeyFrame(0.147540987F, { 1.20000005F, 1.20000005F },
                          CubicBezierEasingFunction_6());
    // Frame 45.
    result.InsertKeyFrame(0.737704933F, { 1.20000005F, 1.20000005F },
                          CubicBezierEasingFunction_6());
    // Frame 47.
    result.InsertKeyFrame(0.770491779F, { 1.0F, 1.0F }, CubicBezierEasingFunction_6());
    return result;
  }

  // - - Layer aggregator
  // - Layer: iconFill
  // Scale
  Vector2KeyFrameAnimation ScaleVector2Animation_1()
  {
    // Frame 0.
    const auto result =
      CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, StepThenHoldEasingFunction());
    // Frame 7.
    result.InsertKeyFrame(0.114754096F, { 1.0F, 1.0F }, HoldThenStepEasingFunction());
    // Frame 9.
    result.InsertKeyFrame(0.147540987F, { 1.20000005F, 1.20000005F },
                          CubicBezierEasingFunction_6());
    // Frame 45.
    result.InsertKeyFrame(0.737704933F, { 1.20000005F, 1.20000005F }, HoldThenStepEasingFunction());
    // Frame 47.
    result.InsertKeyFrame(0.770491779F, { 1.0F, 1.0F }, CubicBezierEasingFunction_6());
    return result;
  }

  // - Layer aggregator
  // Layer: iconFill
  Vector2KeyFrameAnimation ShapeVisibilityAnimation()
  {
    // Frame 0.
    const auto result =
      CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, HoldThenStepEasingFunction());
    // Frame 10.
    result.InsertKeyFrame(0.163934425F, { 1.0F, 1.0F }, HoldThenStepEasingFunction());
    // Frame 49.
    result.InsertKeyFrame(0.803278685F, { 0.0F, 0.0F }, HoldThenStepEasingFunction());
    return result;
  }

  static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
  {
    return geo.as<IGeometrySource2D>();
  }

public:
  HomeIcon_AnimatedVisual(Compositor compositor, CompositionPropertySet themeProperties)
    : _c{ compositor }
    , _themeProperties{ themeProperties }
    , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
  {
    winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
    const auto _ = Root();
  }

  void Close()
  {
    if (_root)
    {
      _root.Close();
    }
  }

  TimeSpan Duration() const { return TimeSpan{ c_durationTicks }; }

  Visual RootVisual() const { return _root; }

  float2 Size() const { return { 96.0F, 110.0F }; }

  void CreateAnimations()
  {
    _containerShape_0.StartAnimation(L"Scale", ScaleVector2Animation_0(), AnimationController_0());
    _containerShape_1.StartAnimation(L"Scale", ShapeVisibilityAnimation(), AnimationController_0());
    _containerShape_2.StartAnimation(L"Scale", ScaleVector2Animation_1(), AnimationController_0());
    _pathGeometry_0.StartAnimation(L"Path", PathKeyFrameAnimation_0(), AnimationController_0());
    _pathGeometry_1.StartAnimation(L"Path", PathKeyFrameAnimation_1(), AnimationController_0());
    _spriteShape_0.StartAnimation(L"StrokeThickness", StrokeThicknessScalarAnimation_3_to_3(),
                                  AnimationController_0());
    _spriteShape_0.StartAnimation(L"RotationAngleInDegrees",
                                  RotationAngleInDegreesScalarAnimation_0_to_0(),
                                  AnimationController_0());
    _spriteShape_0.StartAnimation(L"Offset", OffsetVector2Animation(), AnimationController_0());
    _spriteShape_1.StartAnimation(L"RotationAngleInDegrees",
                                  RotationAngleInDegreesScalarAnimation_0_to_0(),
                                  AnimationController_0());
    _spriteShape_1.StartAnimation(L"Offset", OffsetVector2Animation(), AnimationController_0());
  }

  void DestroyAnimations()
  {
    _containerShape_0.StopAnimation(L"Scale");
    _containerShape_1.StopAnimation(L"Scale");
    _containerShape_2.StopAnimation(L"Scale");
    _pathGeometry_0.StopAnimation(L"Path");
    _pathGeometry_1.StopAnimation(L"Path");
    _spriteShape_0.StopAnimation(L"StrokeThickness");
    _spriteShape_0.StopAnimation(L"RotationAngleInDegrees");
    _spriteShape_0.StopAnimation(L"Offset");
    _spriteShape_1.StopAnimation(L"RotationAngleInDegrees");
    _spriteShape_1.StopAnimation(L"Offset");
  }
};

float4 HomeIcon::ColorAsVector4(Color color)
{
  return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B),
           static_cast<float>(color.A) };
}

CompositionPropertySet HomeIcon::EnsureThemeProperties(Compositor compositor)
{
  if (_themeProperties == nullptr)
  {
    _themeProperties = compositor.CreatePropertySet();
    _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    _themeProperties.InsertVector4(L"AccentColor", ColorAsVector4((Color)_themeAccentColor));
  }

  return _themeProperties;
}

Color HomeIcon::Foreground()
{
  return _themeForeground;
}

void HomeIcon::Foreground(Color value)
{
  _themeForeground = value;
  if (_themeProperties != nullptr)
  {
    _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
  }
}

Color HomeIcon::AccentColor()
{
  return _themeAccentColor;
}

void HomeIcon::AccentColor(Color value)
{
  _themeAccentColor = value;
  if (_themeProperties != nullptr)
  {
    _themeProperties.InsertVector4(L"AccentColor", ColorAsVector4((Color)_themeAccentColor));
  }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual HomeIcon::TryCreateAnimatedVisual(
  Compositor const & compositor)
{
  IInspectable diagnostics = nullptr;
  return TryCreateAnimatedVisual(compositor, diagnostics);
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual HomeIcon::TryCreateAnimatedVisual(
  Compositor const & compositor, IInspectable & diagnostics)
{
  const auto _ = EnsureThemeProperties(compositor);
  diagnostics  = nullptr;
  auto result  = winrt::make<HomeIcon_AnimatedVisual>(compositor, _themeProperties);
  result.CreateAnimations();
  return result;
}

double HomeIcon::FrameCount()
{
  return 61.0;
}

double HomeIcon::Framerate()
{
  return 30.0;
}

TimeSpan HomeIcon::Duration()
{
  return TimeSpan{ 20333333L };
}

double HomeIcon::FrameToProgress(double frameNumber)
{
  return frameNumber / 61.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> HomeIcon::Markers()
{
  return winrt::single_threaded_map<winrt::hstring, double>(
           std::map<winrt::hstring, double>{
             { L"NormalToSelected_Start", 0.0 },
             { L"NormalToSelected_End", 0.492622950819672 },
             { L"SelectedToNormal_Start", 0.623770491803279 },
             { L"SelectedToNormal_End", 1.0 },
           })
    .GetView();
}

void HomeIcon::SetColorProperty(hstring const & propertyName, Color value)
{
  if (propertyName == L"Foreground")
  {
    _themeForeground = value;
  }
  else if (propertyName == L"AccentColor")
  {
    _themeAccentColor = value;
  }
  else
  {
    return;
  }

  if (_themeProperties != nullptr)
  {
    _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
  }
}

void HomeIcon::SetScalarProperty(hstring const &, double)
{
}
}  // namespace winrt::SuiteInstaller::implementation
